apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: dakr-snapshot-setup
  namespace: kube-system
  labels:
    app: dakr-snapshot-setup
    component: snapshot-tools
spec:
  selector:
    matchLabels:
      app: dakr-snapshot-setup
  template:
    metadata:
      labels:
        app: dakr-snapshot-setup
    spec:
      hostNetwork: true
      hostPID: true
      serviceAccountName: dakr-snapshot-setup
      tolerations:
      - operator: Exists
        effect: NoSchedule
      - operator: Exists
        effect: NoExecute
      containers:
      - name: snapshot-setup
        image: alpine:3.18
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: true
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: CRIU_VERSION
          value: "v4.1"
        - name: NETAVARK_VERSION
          value: "v1.15.2"
        - name: DAKR_RELEASE_URL
          value: "https://github.com/devzero-inc/dakr-operator/releases/download"
        - name: DAKR_RELEASE_PREFIX
          value: "DAKR Snapshot Tools - criu-"
        volumeMounts:
        - name: host-bin
          mountPath: /host/usr/bin
        - name: host-lib
          mountPath: /host/usr/lib
        - name: host-etc
          mountPath: /host/etc
        - name: host-proc
          mountPath: /host/proc
        - name: host-sys
          mountPath: /host/sys
        - name: host-dev
          mountPath: /host/dev
        command:
        - /bin/sh
        - -c
        - |
          set -e
          
          echo "Starting DAKR snapshot tools setup..."
          
          apk add --no-cache curl jq file
          
          detect_arch() {
            ARCH=$(uname -m)
            case $ARCH in
              x86_64) ARCH="amd64" ;;
              aarch64) ARCH="arm64" ;;
              *) echo "Unsupported architecture: $ARCH"; exit 1 ;;
            esac
            
            echo "Detected architecture: $ARCH"
          }

          check_existing_installation() {
            echo "Checking for existing installations..."
            
            criu_exists=false
            netavark_exists=false
            
            echo "üîç Checking for CRIU on host system..."
            criu_path=""
            
            for path in /usr/bin/criu /bin/criu /sbin/criu; do
              if [ -x "/host$path" ]; then
                echo "Found CRIU at host path: $path"
                criu_path="$path"
                break
              fi
            done
            
            if [ -z "$criu_path" ]; then
              echo "Checking if CRIU is available in host PATH..."
              if nsenter --target 1 --mount --uts --ipc --net --pid which criu >/dev/null 2>&1; then
                criu_path=$(nsenter --target 1 --mount --uts --ipc --net --pid which criu 2>/dev/null)
                echo "Found CRIU in host PATH at: $criu_path"
              fi
            fi
            
            if [ -n "$criu_path" ]; then
              echo "Testing CRIU functionality on host..."
              # Test CRIU version command using nsenter to run in host context
              if nsenter --target 1 --mount --uts --ipc --net --pid "$criu_path" --version >/dev/null 2>&1; then
                criu_version=$(nsenter --target 1 --mount --uts --ipc --net --pid "$criu_path" --version 2>/dev/null | head -1 || echo 'unknown')
                echo "‚úÖ CRIU is working on host! Version: $criu_version"
                criu_exists=true
              else
                echo "‚ö†Ô∏è  CRIU found but not functional (version check failed)"
                criu_exists=false
              fi
            else
              echo "‚ùå CRIU not found on host system"
              criu_exists=false
            fi
            
            echo "üîç Checking for Netavark on host system..."
            netavark_path=""
            
            for path in /usr/bin/netavark /bin/netavark /sbin/netavark; do
              if [ -x "/host$path" ]; then
                echo "Found Netavark at host path: $path"
                netavark_path="$path"
                break
              fi
            done
            
            if [ -z "$netavark_path" ]; then
              echo "Checking if Netavark is available in host PATH..."
              if nsenter --target 1 --mount --uts --ipc --net --pid which netavark >/dev/null 2>&1; then
                netavark_path=$(nsenter --target 1 --mount --uts --ipc --net --pid which netavark 2>/dev/null)
                echo "Found Netavark in host PATH at: $netavark_path"
              fi
            fi
            
            if [ -n "$netavark_path" ]; then
              echo "Testing Netavark functionality on host..."
              # Test Netavark version command using nsenter to run in host context
              if nsenter --target 1 --mount --uts --ipc --net --pid "$netavark_path" --version >/dev/null 2>&1; then
                netavark_version=$(nsenter --target 1 --mount --uts --ipc --net --pid "$netavark_path" --version 2>/dev/null | head -1 || echo 'unknown')
                echo "‚úÖ Netavark is working on host! Version: $netavark_version"
                netavark_exists=true
              else
                echo "‚ö†Ô∏è  Netavark found but not functional (version check failed)"
                netavark_exists=false
              fi
            else
              echo "‚ùå Netavark not found on host system"
              netavark_exists=false
            fi
            
            echo "Installation status summary:"
            echo "  CRIU: $([ "$criu_exists" = "true" ] && echo "‚úÖ Working" || echo "‚ùå Missing/Non-functional")"
            echo "  Netavark: $([ "$netavark_exists" = "true" ] && echo "‚úÖ Working" || echo "‚ùå Missing/Non-functional")"
            
            if [ "$criu_exists" = "true" ] && [ "$netavark_exists" = "true" ]; then
              echo "‚úÖ Both CRIU and Netavark are already installed and functional on host. Skipping download."
              return 0
            else
              echo "‚ö†Ô∏è  Missing or non-functional binaries detected. Proceeding with download and installation."
              return 1
            fi
          }

          install_binaries() {
            # Check if installation is needed
            if check_existing_installation; then
              echo "Installation already complete, skipping download."
              return 0
            fi
            
            echo "Finding latest criu + netavark release..."
            
            local latest_tag=""
            local api_response=""
            
            echo "Fetching releases from public GitHub API..."
            api_response=$(curl -s "https://api.github.com/repos/devzero-inc/dakr-operator-installers/releases")
            
            echo "API response sample:"
            echo "$api_response" | head -5
            
            if echo "$api_response" | jq empty 2>/dev/null; then
              # Check if it's an error response
              if echo "$api_response" | jq -e '.message' >/dev/null 2>&1; then
                echo "‚ùå GitHub API error:"
                echo "$api_response" | jq -r '.message'
                echo "‚ùå Documentation: $(echo "$api_response" | jq -r '.documentation_url // "N/A"')"
                exit 1
              fi
              
              latest_tag=$(echo "$api_response" | \
                jq -r '.[] | select(.name | startswith("'"$DAKR_RELEASE_PREFIX"'")) | .tag_name' | \
                head -1)
            else
              echo "‚ùå Invalid JSON response from GitHub API"
              echo "Response: $api_response"
              exit 1
            fi
            
            if [ -z "$latest_tag" ] || [ "$latest_tag" = "null" ]; then
              echo "‚ùå No releases found starting with: $DAKR_RELEASE_PREFIX"
              echo "Available releases:"
              echo "$api_response" | jq -r '.[].name' 2>/dev/null || echo "Could not parse release names"
              exit 1
            fi
            
            echo "Found latest release tag: $latest_tag"
            
            local binary_name="dakr-snapshot-tools-${ARCH}.tar.gz"
            local download_url="${DAKR_RELEASE_URL}/${latest_tag}/${binary_name}"
            
            echo "Downloading binaries from: $download_url"
            
            TEMP_DIR=$(mktemp -d)
            cd $TEMP_DIR
            
            download_success=false
            echo "Downloading from public GitHub releases..."
            if curl -L -f -o "$binary_name" "$download_url" --connect-timeout 30 --max-time 300; then
              download_success=true
            else
              echo "Download failed. HTTP response:"
              curl -I "$download_url" || true
              download_success=false
            fi
            
            if [ "$download_success" = "false" ]; then
              echo "‚ùå Failed to download artifact: $binary_name"
              echo "‚ùå URL attempted: $download_url"
              echo "‚ùå This OS/architecture combination is not supported or artifact does not exist"
              exit 1
            fi
            
            echo "Successfully downloaded $binary_name"
            
            # Debug: Check archive contents before extraction
            echo "Archive contents:"
            tar -tzf "$binary_name" | head -20
            
            tar -xzf "$binary_name"
            
            # Debug: Check what was extracted
            echo "Extracted files:"
            ls -la
            
            # Handle nested archive structure
            if [ -f "$binary_name" ]; then
              echo "Found nested archive, extracting inner tar.gz..."
              tar -xzf "$binary_name"
              rm "$binary_name"  # Remove the inner archive after extraction
            fi
            
            echo "Looking for subdirectory containing binaries..."
            binary_dir=""
            for dir in */; do
              if [ -d "$dir" ]; then
                # Check if this directory contains the binaries we need
                if [ -f "${dir}criu" ] || [ -f "${dir}netavark" ]; then
                  binary_dir="$dir"
                  echo "Found binaries in directory: $binary_dir"
                  break
                fi
              fi
            done
            
            if [ -n "$binary_dir" ]; then
              echo "Entering binary directory: $binary_dir"
              cd "$binary_dir"
              echo "Contents:"
              ls -la
            else
              echo "‚ùå No directory containing binaries found in archive"
              echo "Available directories:"
              ls -la */
              exit 1
            fi
            
            criu_installed=false
            if [ "$criu_exists" = "true" ]; then
              echo "‚úÖ CRIU already installed, skipping"
              criu_installed=true
            elif [ -f criu ]; then
              echo "Installing CRIU..."
              chmod +x criu
              cp criu /host/usr/bin/criu
              chmod +x /host/usr/bin/criu
              echo "CRIU installed successfully"
              criu_installed=true
            else
              echo "‚ùå CRIU binary not found in archive"
            fi
            
            netavark_installed=false
            if [ "$netavark_exists" = "true" ]; then
              echo "‚úÖ Netavark already installed, skipping"
              netavark_installed=true
            elif [ -f netavark ]; then
              echo "Installing Netavark..."
              chmod +x netavark
              cp netavark /host/usr/bin/netavark
              chmod +x /host/usr/bin/netavark
              echo "Netavark installed successfully"
              netavark_installed=true
            else
              echo "‚ùå Netavark binary not found in archive"
            fi
            
            if [ "$criu_installed" = "false" ] && [ "$netavark_installed" = "false" ]; then
              echo "‚ùå No binaries found in archive. Installation failed."
              exit 1
            fi
            
            cd /
            rm -rf $TEMP_DIR
          }
          
          verify_installation() {
            echo "Verifying installation..."
            
            echo "Checking if binaries exist on host:"
            ls -la /host/usr/bin/criu /host/usr/bin/netavark
            
            echo "Checking file types:"
            file /host/usr/bin/criu
            file /host/usr/bin/netavark
            
            if [ -x /host/usr/bin/criu ]; then
              echo "‚úÖ CRIU binary is executable"
            else
              echo "‚ùå CRIU binary is not executable"
              return 1
            fi
            
            if [ -x /host/usr/bin/netavark ]; then
              echo "‚úÖ Netavark binary is executable"
            else
              echo "‚ùå Netavark binary is not executable"
              return 1
            fi
            
            echo "‚úÖ All tools installed and verified successfully!"
            echo "Note: Runtime verification requires host namespace access"
            echo "CRIU location: /usr/bin/criu"
            echo "Netavark location: /usr/bin/netavark"
          }
          
          setup_kernel_params() {
            echo "Setting up kernel parameters for CRIU..."
            
            if [ -f /host/proc/sys/kernel/seccomp/actions_avail ]; then
              if grep -q "allow" /host/proc/sys/kernel/seccomp/actions_avail; then
                echo "Seccomp actions already configured"
              fi
            fi
            
            echo "Checking kernel features..."
            if [ -f /host/proc/config.gz ]; then
              if zcat /host/proc/config.gz | grep -q "CONFIG_CHECKPOINT_RESTORE=y"; then
                echo "‚úÖ Checkpoint/Restore support enabled"
              else
                echo "‚ö†Ô∏è  Checkpoint/Restore support not explicitly enabled"
              fi
            else
              echo "‚ÑπÔ∏è  Cannot check kernel config (/proc/config.gz not available)"
            fi
            
            if [ -f /host/sys/fs/cgroup/cgroup.controllers ]; then
              echo "‚úÖ cgroups v2 detected"
            else
              echo "‚ÑπÔ∏è  cgroups v1 detected"
            fi
          }

          configure_criu() {
            echo "Configuring CRIU settings..."
            mkdir -p /host/etc/criu
            echo "tcp-established" > /host/etc/criu/runc.conf
            echo "tcp-close" >> /host/etc/criu/runc.conf
            echo "enable-fs all" >> /host/etc/criu/runc.conf
            echo "leave-stopped" >> /host/etc/criu/runc.conf
            echo "‚úÖ CRIU config written to /host/etc/criu/runc.conf"
          }

          mark_ready() {
            echo "1" > /ready
          }
          
          main() {
            detect_arch
            install_binaries
            configure_criu
            verify_installation
            setup_kernel_params
            mark_ready
            
            echo "DAKR snapshot tools setup completed successfully on node: $NODE_NAME"
            echo "Node is now ready for container checkpointing and restoration"
            
            echo "Setup complete. Monitoring for changes..."
            while true; do
              sleep 3600
            done

            rm -f /ready || true
          }
          
          main
        readinessProbe:
          exec:
            command:
            - cat
            - /ready
          periodSeconds: 5
      volumes:
      - name: host-bin
        hostPath:
          path: /usr/bin
          type: DirectoryOrCreate
      - name: host-lib
        hostPath:
          path: /usr/lib
          type: DirectoryOrCreate
      - name: host-etc
        hostPath:
          path: /etc
          type: Directory
      - name: host-proc
        hostPath:
          path: /proc
          type: Directory
      - name: host-sys
        hostPath:
          path: /sys
          type: Directory
      - name: host-dev
        hostPath:
          path: /dev
          type: Directory
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dakr-snapshot-setup
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: dakr-snapshot-setup
rules:
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: dakr-snapshot-setup
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dakr-snapshot-setup
subjects:
- kind: ServiceAccount
  name: dakr-snapshot-setup
  namespace: kube-system