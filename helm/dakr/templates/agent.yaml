{{- if .Values.agent.enabled }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ include "dakr.fullname" . }}-agent
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "dakr.labels" . | nindent 4 }}
    app.kubernetes.io/component: {{ include "dakr.fullname" . }}-agent
    control-plane: {{ include "dakr.fullname" . }}-agent
spec:
  selector:
    matchLabels:
      {{- include "dakr.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: {{ include "dakr.fullname" . }}-agent
      control-plane: {{ include "dakr.fullname" . }}-agent
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: agent
      labels:
        {{- include "dakr.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: {{ include "dakr.fullname" . }}-agent
        control-plane: {{ include "dakr.fullname" . }}-agent
    spec:
      serviceAccountName: {{ include "dakr.fullname" . }}-agent
      dnsPolicy: ClusterFirst
      terminationGracePeriodSeconds: 10
      nodeSelector:
        dakr.devzero.io/checkpoint-node: "true"
      tolerations:
        - effect: NoSchedule
          operator: Exists
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/arch
                  operator: In
                  values:
                    - amd64
                    - arm64
                - key: kubernetes.io/os
                  operator: In
                  values:
                    - linux
      initContainers:
      - name: installer
        image: "{{ .Values.image.repository }}/{{ .Values.agent.installerImage }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        args: 
        - --criu-image={{ .Values.image.repository }}/{{ .Values.agent.criuImage }}:{{ .Values.image.tag }}
        - --runtime={{ .Values.agent.runtime | default "containerd" }}
        - --containerd-config-path={{ .Values.agent.containerdConfigPath | default "/etc/containerd/config.toml" }}
        - --containerd-sock={{ .Values.agent.containerdSock | default "/run/containerd/containerd.sock" }}
        {{- if .Values.agent.disableIOUring }}
        - --disable-io-uring={{ .Values.agent.disableIOUring }}
        {{- end }}
        {{- if .Values.agent.ioUringPath }}
        - --io-uring-path={{ .Values.agent.ioUringPath }}
        {{- end }}
        - --configure-inotify={{ .Values.agent.configureInotify }}
        {{- if .Values.agent.configureInotify }}
        - --inotify-max-instances={{ .Values.agent.inotify.maxUserInstances }}
        - --inotify-max-watches={{ .Values.agent.inotify.maxUserWatches }}
        - --inotify-instances-path={{ .Values.agent.inotify.instancesPath }}
        - --inotify-watches-path={{ .Values.agent.inotify.watchesPath }}
        {{- end }}
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /host
          name: hostroot
        - mountPath: /etc/containerd
          name: containerd-etc
        - mountPath: /run/containerd
          name: containerd-run
        - mountPath: /opt/checkpoint-shim
          name: checkpoint-shim-opt
        - mountPath: /run/systemd
          name: systemd-run
        - mountPath: /etc/criu
          name: criu-etc
        - name: k3s
          mountPath: /run/k3s/containerd
        - name: rancher
          mountPath: /var/lib/rancher/
      containers:
      - name: node
        image: "{{ .Values.image.repository }}/{{ .Values.agent.nodeImage }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["./node"]
        args:
        - --addr={{ .Values.agent.port | default 8090  }}
        - --debug={{ .Values.agent.debug | default false  }}
        - --containerd-sock={{ .Values.agent.containerdSock | default "/run/containerd/containerd.sock" }}
        ports:
        - containerPort: {{ .Values.agent.port | default 8090 }}
          hostPort: {{ .Values.agent.port | default 8090 }}
          name: grpc
          protocol: TCP
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        resources: 
          {{ toYaml .Values.agent.resources | nindent 10 }}
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
          readOnlyRootFilesystem: false
          privileged: true
        volumeMounts:
        - name: dakr-checkpoints
          mountPath: /var/lib/dakr/checkpoints
        - name: dakr-run
          mountPath: /run/dakr
        - name: var-log-pods
          mountPath: /var/log/pods
          readOnly: true
        - name: containerd-run
          mountPath: /run/containerd
        - name: containerd-var-run
          mountPath: /var/run/containerd
        - name: k3s
          mountPath: /run/k3s/containerd
        - name: rancher
          mountPath: /var/lib/rancher/
        - name: host-proc
          mountPath: /proc
          readOnly: true
        - name: host-sys
          mountPath: /sys
          readOnly: true
        # - name: tls-certs
        #   mountPath: /tls
        #   readOnly: true
        livenessProbe:
          tcpSocket:
            port: {{ .Values.agent.port | default 8090 }}
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: {{ .Values.agent.port | default 8090 }}
          initialDelaySeconds: 5
          periodSeconds: 5
      - name: pause
        image: registry.k8s.io/pause:3.9
        resources:
          requests:
            cpu: 1m
            memory: 1Mi
      volumes:
      - name: hostroot
        hostPath:
          path: /
      - name: k3s
        hostPath:
          path: /run/k3s/containerd/
      - name: rancher
        hostPath:
          path: /var/lib/rancher/
      - name: containerd-etc
        hostPath:
          path: /etc/containerd
      - name: containerd-run
        hostPath:
          path: /run/containerd
      - name: checkpoint-shim-opt
        hostPath:
          path: /opt/checkpoint-shim
      - name: systemd-run
        hostPath:
          path: /run/systemd
      - name: criu-etc
        hostPath:
          path: /etc/criu
      - name: containerd-var-run
        hostPath:
          path: /var/run/containerd
      - name: var-log-pods
        hostPath:
          path: /var/log/pods
      - name: dakr-checkpoints
        hostPath:
          path: /var/lib/dakr/checkpoints
          type: DirectoryOrCreate
      - name: dakr-run
        hostPath:
          path: /run/dakr
          type: DirectoryOrCreate
      - name: host-proc
        hostPath:
          path: /proc
          type: Directory
      - name: host-sys
        hostPath:
          path: /sys
          type: Directory
      # - name: tls-certs
      #   secret:
      #     secretName: dakr-node-tls
      #     defaultMode: 0400
{{- end }}
