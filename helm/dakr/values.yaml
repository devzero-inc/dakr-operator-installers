nameOverride: ""
fullnameOverride: ""

# The cloud provider where the operator is being deployed.
# Must be one of: "aws", "gcp", "azure", or "" (for no cloud provider).
cloud: ""


image:
  repository: docker.io/devzeroinc
  # This sets the pull policy for images.
  pullPolicy: Always 
  # Overrides the image tag whose default is the chart appVersion.
  tag: "v0.0.13"

imagePullSecrets: []

operator:
  enabled: true
  image: dakr-operator
  replicas: 3
  resources:
    limits:
      cpu: 500m
      memory: 128Mi
    requests:
      cpu: 10m
      memory: 64Mi
  endpoint: "https://dakr.devzero.io"
  snapshotRegistry:
    registry: "ttl.sh"
    repoName: ""
    authProvider: "noop"
  clusterToken: "REPLACE_WITH_TOKEN" # If this is empty, the operator will attempt to read from the ConfigMap below.
                   # If set to a non-empty string, this value will be used directly.
  clusterName: "REPLACE_WITH_CLUSTER_NAME" # If this is empty, the operator will attempt to read from the ConfigMap below.
                  # If set to a non-empty string, this value will be used directly.
  clusterLocation: "REPLACE_WITH_CLUSTER_LOCATION"  # usually the cloud region code for where the cluster is running, can also be the zone if the cluster is zonal
  # noCloudCreds: true # If true, operator will not attempt to perform node scaling operations, and will not require cloud credentials
  # tokenFromConfigMap: # If clusterToken is not specified above, operator will read from below ConfigMap value
  #   name: "devzero-zxporter-env-config" # Name of the ConfigMap
  #   namespace: "devzero-zxporter"       # Namespace of the ConfigMap
  #   key: "CLUSTER_TOKEN"                # Key in the ConfigMap's data to get the token
  # nameFromConfigMap: # If clusterName is not specified above, operator will read from below ConfigMap value
  #   name: "devzero-zxporter-env-config" # Name of the ConfigMap
  #   namespace: "devzero-zxporter"       # Namespace of the ConfigMap
  #   key: "KUBE_CONTEXT_NAME"            # Key in the ConfigMap's data to get the cluster name from
  port: 9443
  debugPort: 8082
  features:
    argocdPatching: false # if set, the operator will patch argo applications to ignore differences from the dakr operator
    workloadRecBatchSize: 1 # needs to be >=1; determines batch size of pulling down workload recommendations from control plane, before being persisted as CRDs 
    nodeGroupRecBatchSize: 1 # needs to be >=1; determines batch size of pulling down node group recommendations from control plane, before being persisted as CRDs 
  serviceAccount:
    name: "dakr-operator-sa"
    # Annotations for cloud provider IAM integration.
    #
    # For AWS EKS with IAM Roles for Service Accounts (IRSA):
    # 1. Run the terraform module in terraform/aws/.
    # 2. Set the annotation key to the output 'ksa_annotation_key_aws' (eks.amazonaws.com/role-arn).
    # 3. Set the annotation value to the output 'operator_iam_role_arn'.
    #
    # For GCP GKE with Workload Identity:
    # 1. Run the terraform module in terraform/gcp/.
    # 2. Set the annotation key to the output 'ksa_annotation_key' (iam.gke.io/gcp-service-account).
    # 3. Set the annotation value to the output 'gcp_service_account_email'.
    #
    # For Azure AKS with Workload Identity:
    # 1. Run the terraform module in terraform/azure/.
    # 2. Set the annotation key to the output 'ksa_annotation_key_client_id' (azure.workload.identity/client-id).
    # 3. Set the annotation value to the output 'operator_identity_client_id'.
    #
    # --- Examples ---
    # AWS:
    #   "eks.amazonaws.com/role-arn": "arn:aws:iam::YOUR_ACCOUNT_ID:role/YOUR_EKS_CLUSTER_NAME-dakr-operator-sa-role"
    # GCP:
    #   "iam.gke.io/gcp-service-account": "your-gcp-sa-email@your-gcp-project-id.iam.gserviceaccount.com"
    # Azure:
    #   "azure.workload.identity/client-id": "YOUR_USER_ASSIGNED_IDENTITY_CLIENT_ID"
    annotations:
      # Replace with the appropriate key-value pair from your Terraform output
      # (see instructions above). 
      "REPLACE_WITH_ANNOTATION_KEY": "REPLACE_WITH_ANNOTATION_VALUE"

agent:
  enabled: true
  image: dakr-agent
  resources:
    requests:
      cpu: 500m
      memory: 1Gi
  configFilename: development
  bind: "/containerd.sock"
  port: 54192
  containerdSocket: "/var/run/containerd/containerd.sock"

webhook:
  enabled: true
  caBundle: ""  # Base64 encoded CA bundle for webhook
